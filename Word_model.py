# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19B_Xky1MfS1B1bgWsRlTiJ1pBCqNUhOH
"""

import numpy as np
import tensorflow as tf
import pandas as pd
from collections import Counter
import csv, re, pickle
from fastapi import FastAPI, Request,Query
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from typing import Optional


import numpy as np
import sys
from sklearn.decomposition import PCA,KernelPCA
import gensim  
import json
import re

with open('./dataset.json') as f:
  data = f.read()
data = data.split("\n")
# data = json.loads(data[0])
print(len(data))
datas = [json.loads(obj) for obj in data[:10000]]
data_text = [data["Text"] for data in datas]


# TEXT_CLEANING_RE = "@\S+|https?:\S+|http?:\S|[^A-Za-z0-9]+"
def preprocess(text, stem=False):
    # Remove link,user and special characters
    text = re.sub(r"[-()\"#/@;:<>{}=~|.?,a-z,A-Z,0-9]", ' ', str(text)).strip()
    tokens = []
    for token in text.split():
        tokens.append(token)
    return " ".join(tokens)

documents = [preprocess(_text).split() for _text in data_text] 


w2v_model = gensim.models.word2vec.Word2Vec(size = 30,window=7,min_count=10,workers=8)

w2v_model.build_vocab(documents)

words = w2v_model.wv.index2word
vocab_size = len(words)
print("Vocab size", vocab_size)


w2v_model.train(documents, total_examples=len(documents), epochs=8)
print(w2v_model.wv.most_similar("سرد"))


#API for the app

def print_amir():
    print("my name is amir")
    
    
def similar(text):
    return w2v_model.wv.most_similar(text)

app = FastAPI()

templates = Jinja2Templates(directory="templates/")

app = FastAPI()
@app.get("/Yasin")
async def root():
    return {"message": "Yasin is here"}
  
@app.get("/")
def form_post(request: Request):
    result = "Type a number"
    return templates.TemplateResponse('form.html', context={'request': request, 'result': result})

@app.post("/")
def form_post(request: Request):
    result = similar("ببر")
    # return{"message": "Yasin is here"}
    return templates.TemplateResponse('form.html', context={'request': request, 'result': result})

@app.get("/items/")
async def read_items(q: Optional[str] = Query(None, max_length=50)):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results

@app.get("/list/{item_id}")
def read_root(item_id: str, request: Request):
    client_host = request.client.host
    a = similar(item_id)
    return {"client_host": client_host, "item_id": a}
